<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hana.app.repository.PostRepository">

    <resultMap id="post" type="postDto">
        <id column="post_id" property="postId"/>
        <result column="title" property="title"/>
        <result column="content" property="content"/>
        <result column="is_anonymous" property="anonymous"/>
        <result column="scraps" property="scraps"/>
        <result column="likes" property="likes"/>
        <result column="status" property="status"/>
        <result column="board_id" property="boardId"/>
        <result column="is_liked" property="isLiked"/>
        <result column="is_scraped" property="isScraped"/>
        <result column="comment_count" property="commentCount"/>
        <result column="create_date" property="createDate"/>
        <result column="update_date" property="updateDate"/>
        <association property="userDto" javaType="userDto">
            <id column="user_id" property="userId"/>
            <result column="email" property="email"/>
            <result column="nickname" property="nickname"/>
            <result column="gender" property="gender"/>
        </association>
    </resultMap>

    <select id="selectOne" parameterType="Integer" resultMap="post">
        SELECT *, p.user_id AS post_user_id
        FROM post p
        LEFT JOIN user u ON p.user_id = u.user_id
        LEFT JOIN (SELECT post_id, user_id AS is_liked
                   FROM liked_post
                   WHERE user_id = #{userId}) AS lp ON p.post_id = lp.post_id
        LEFT JOIN (SELECT post_id, user_id AS is_scraped
                   FROM scrap
                   WHERE user_id = #{userId}) AS s ON p.post_id = s.post_id
        WHERE p.post_id = #{postId}
    </select>

    <select id="select" resultType="postDto">
        SELECT *
        FROM post
    </select>

    <select id="getPostList" resultMap="post">
        SELECT p.*, COUNT(c.comment_id) AS comment_count, is_liked, u.email, u.nickname, u.gender
        FROM post p
        LEFT JOIN user u ON p.user_id = u.user_id
        LEFT JOIN (SELECT *
                   FROM comment
                   WHERE status &lt;&gt; "Deleted") AS c ON p.post_id = c.post_id
        LEFT JOIN (SELECT post_id, user_id AS is_liked
                   FROM liked_post
                   WHERE user_id = #{userId}) AS lp ON p.post_id = lp.post_id
        WHERE p.board_id = #{boardId} AND p.status = "ACTIVE"
        GROUP BY p.post_id, is_liked
        ORDER BY p.create_date DESC
    </select>

    <select id="getMyPostList" resultMap="post">
        SELECT p.*, COUNT(c.comment_id) AS comment_count, is_liked, u.email, u.nickname, u.gender
        FROM post p
        LEFT JOIN user u ON p.user_id = u.user_id
        LEFT JOIN (SELECT *
                   FROM comment
                   WHERE status &lt;&gt; "Deleted") AS c ON p.post_id = c.post_id
        LEFT JOIN (SELECT post_id, user_id AS is_liked
                   FROM liked_post
                   WHERE user_id = #{userId}) AS lp ON p.post_id = lp.post_id
        WHERE p.user_id = #{userId} AND p.status = "Active"
        GROUP BY p.post_id, is_liked
        ORDER BY p.create_date DESC
    </select>

    <select id="getScrapList" resultMap="post">
        SELECT p.*, COUNT(c.comment_id) AS comment_count, is_liked, u.email, u.nickname, u.gender
        FROM post p JOIN (SELECT post_id FROM scrap WHERE user_id = #{userId}) AS s ON p.post_id = s.post_id
        LEFT JOIN user u ON p.user_id = u.user_id
        LEFT JOIN (SELECT *
                   FROM comment
                   WHERE status &lt;&gt; "Deleted") AS c ON p.post_id = c.post_id
        LEFT JOIN (SELECT post_id, user_id AS is_liked
                   FROM liked_post
                   WHERE user_id = #{userId}) AS lp ON p.post_id = lp.post_id
        WHERE p.status = "ACTIVE"
        GROUP BY p.post_id, is_liked
        ORDER BY p.create_date DESC
    </select>

    <insert id="insertByAnonymous" parameterType="postDto">
        INSERT INTO post (title, content, user_id, board_id, create_date)
        VALUES (#{title}, #{content}, #{userDto.userId}, #{boardId}, NOW())
    </insert>

    <insert id="insertByNotAnonymous" parameterType="postDto">
        INSERT INTO post (title, content, is_anonymous, user_id, board_id, create_date)
        VALUES (#{title}, #{content}, 0, #{userDto.userId}, #{boardId}, NOW())
    </insert>

    <update id="update" parameterType="postDto">
        UPDATE post
        SET title=#{title}, is_anonymous=#{isAnonymous}, content=#{content}, update_date=NOW()
        WHERE post_id=#{postId}
    </update>

    <update id="delete" parameterType="Integer">
        UPDATE post
        SET status="Deleted", update_date=NOW()
        WHERE post_id=#{postId}
    </update>

    <update id="updateLikeCount">
        UPDATE post
        SET likes = (SELECT count(*)
                     FROM liked_post
                     WHERE post_id=#{postId})
        WHERE post_id=#{postId}
    </update>

    <update id="updateScrapCount">
        UPDATE post
        SET scraps = (SELECT count(*)
                     FROM scrap
                     WHERE post_id=#{postId})
        WHERE post_id=#{postId}
    </update>

    <select id="selectByKeyword" resultMap="post">
        SELECT p.*, COUNT(c.comment_id) AS comment_count, is_liked, u.email, u.nickname, u.gender
        FROM post p
        LEFT JOIN user u ON p.user_id = u.user_id
        LEFT JOIN (SELECT *
                   FROM comment
                   WHERE status &lt;&gt; "Deleted") AS c ON p.post_id = c.post_id
        LEFT JOIN (SELECT post_id, user_id AS is_liked
                   FROM liked_post
                   WHERE user_id = #{userId}) AS lp ON p.post_id = lp.post_id
        WHERE p.board_id = #{boardId}
        AND p.status = "ACTIVE"
        AND (p.title LIKE CONCAT('%', #{keyword}, '%') OR p.content LIKE CONCAT('%', #{keyword}, '%'))
        GROUP BY p.post_id, is_liked
        ORDER BY p.create_date DESC
    </select>
</mapper>